# Copyright (c) 2025 Robert Srinivasiah

# https://clang.llvm.org/extra/clang-tidy/checks/list.html

---
Checks: >-
  clang-diagnostic-*,
  clang-analyzer-*,
  -clang-analyzer-alpha*,
  boost-use-to-string,
  bugprone-suspicious-memset-usage,
  bugprone-undefined-memory-manipulation,
  bugprone-use-after-move,
  cert-dcl50-cpp,
  cert-env33-c,
  cert-err52-cpp,
  cppcoreguidelines-interfaces-global-init,
  cppcoreguidelines-pro-type-const-cast,
  cppcoreguidelines-pro-type-cstyle-cast,
  cppcoreguidelines-slicing,
  google-build-explicit-make-pair,
  google-global-names-in-headers,
  google-readability-casting,
  google-runtime-member-string-references,
  google-runtime-operator,
  misc-argument-comment,
  misc-assert-side-effect,
  misc-definitions-in-headers,
  misc-fold-init-type,
  misc-forward-declaration-namespace,
  misc-inaccurate-erase,
  misc-inefficient-algorithm,
  misc-lambda-function-name,
  misc-macro-parentheses,
  misc-macro-repeated-side-effects,
  misc-misplaced-const,
  misc-multiple-statement-macro,
  misc-new-delete-overloads,
  misc-noexcept-move-constructor,
  misc-non-copyable-objects,
  misc-redundant-expression,
  misc-sizeof-container,
  misc-sizeof-expression,
  misc-static-assert,
  misc-string-compare,
  misc-string-constructor,
  misc-string-integer-assignment,
  misc-string-literal-with-embedded-nul,
  misc-suspicious-enum-usage,
  misc-suspicious-semicolon,
  misc-suspicious-string-compare,
  misc-swapped-arguments,
  misc-throw-by-value-catch-by-reference,
  misc-unconventional-assign-operator,
  misc-undelegated-constructor,
  misc-uniqueptr-reset-release,
  misc-unused-alias-decls,
  misc-unused-parameters,
  misc-unused-raii,
  misc-virtual-near-miss,
  modernize-deprecated-headers,
  modernize-loop-convert,
  modernize-make-shared,
  modernize-make-unique,
  modernize-redundant-void-arg,
  modernize-replace-auto-ptr,
  modernize-replace-random-shuffle,
  modernize-return-braced-init-list,
  modernize-shrink-to-fit,
  modernize-use-auto,
  modernize-use-bool-literals,
  modernize-use-default-member-init,
  modernize-use-emplace,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  modernize-use-noexcept,
  modernize-use-nullptr,
  modernize-use-override,
  -modernize-use-using,
  performance-faster-string-find,
  performance-for-range-copy,
  performance-implicit-cast-in-loop,
  performance-inefficient-string-concatenation,
  performance-unnecessary-copy-initialization,
  readability-avoid-const-params-in-decls,
  -readability-braces-around-statements,
  readability-const-return-type,
  readability-container-size-empty,
  readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-deleted-default,
  readability-else-after-return,
  readability-function-size,
  readability-identifier-naming,
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  readability-make-member-function-const,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-non-const-parameter,
  readability-qualified-auto,
  readability-redundant-access-specifiers,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-function-ptr-dereference,
  readability-redundant-member-init,
  readability-redundant-preprocessor,
  readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-simplify-boolean-expr,
  readability-simplify-subscript-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  readability-string-compare,
  readability-uniqueptr-delete-release

# https://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html#cmdoption-arg-classprefix

CheckOptions:
  - key:    readability-identifier-naming.PublicMemberCase
    value:  'camelBack'
  - key:    readability-identifier-naming.PrivateMemberCase
    value:  'camelBack'
  - key:    readability-identifier-naming.PrivateMemberPrefix
    value:  'm_'
  - key: readability-identifier-naming.FunctionCase
    value: 'CamelCase'
  - key: readability-identifier-naming.MethodCase
    value: 'CamelCase'
  - key: readability-identifier-naming.LocalVariableCase
    value: 'lower_case'
  - key: readability-identifier-naming.ParameterCase
    value: 'lower_case'
  - key: readability-identifier-naming.ConstexprVariableCase
    value: 'Camel_Snake_Case'
  - key: readability-identifier-naming.StaticConstantCase
    value: 'Camel_Snake_Case'
  - key: readability-identifier-naming.MacroDefinitionCase
    value: 'UPPER_CASE'